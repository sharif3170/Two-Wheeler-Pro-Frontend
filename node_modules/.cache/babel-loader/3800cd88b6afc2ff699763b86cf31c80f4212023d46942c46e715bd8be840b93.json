{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\phata\\\\OneDrive\\\\Desktop\\\\VaahanBazaar\\\\front\\\\src\\\\contexts\\\\ReviewsContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ReviewsContext = /*#__PURE__*/createContext();\nexport const ReviewsProvider = ({\n  children\n}) => {\n  _s();\n  const [reviews, setReviews] = useState([]);\n\n  // Load reviews from backend on initial load\n  useEffect(() => {\n    fetchAllReviews();\n  }, []);\n  const fetchAllReviews = async () => {\n    try {\n      // In a real app, you would fetch reviews from the backend\n      // For now, we'll keep the localStorage approach for simplicity\n      const savedReviews = localStorage.getItem('reviews');\n      if (savedReviews) {\n        setReviews(JSON.parse(savedReviews));\n      }\n    } catch (err) {\n      console.error('Error fetching reviews:', err);\n    }\n  };\n  const addReview = async (reviewData, userId) => {\n    try {\n      // In a real app, you would send this to the backend\n      const newReview = {\n        id: Date.now(),\n        ...reviewData,\n        date: new Date().toISOString().split('T')[0]\n      };\n\n      // For now, we'll keep the localStorage approach for simplicity\n      setReviews([...reviews, newReview]);\n      localStorage.setItem('reviews', JSON.stringify([...reviews, newReview]));\n      return newReview;\n    } catch (err) {\n      console.error('Error adding review:', err);\n      throw err;\n    }\n  };\n  const getReviewsForVehicle = vehicleId => {\n    return reviews.filter(review => review.vehicleId === vehicleId);\n  };\n  const getUserReviewForVehicle = (userId, vehicleId) => {\n    return reviews.find(review => review.userId === userId && review.vehicleId === vehicleId);\n  };\n  return /*#__PURE__*/_jsxDEV(ReviewsContext.Provider, {\n    value: {\n      reviews,\n      addReview,\n      getReviewsForVehicle,\n      getUserReviewForVehicle\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n_s(ReviewsProvider, \"FPrwLLWcZBXrtWYcIRYMKBd2Ocw=\");\n_c = ReviewsProvider;\nexport const useReviews = () => {\n  _s2();\n  const context = useContext(ReviewsContext);\n  if (!context) {\n    throw new Error('useReviews must be used within a ReviewsProvider');\n  }\n  return context;\n};\n_s2(useReviews, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"ReviewsProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","axios","jsxDEV","_jsxDEV","ReviewsContext","ReviewsProvider","children","_s","reviews","setReviews","fetchAllReviews","savedReviews","localStorage","getItem","JSON","parse","err","console","error","addReview","reviewData","userId","newReview","id","Date","now","date","toISOString","split","setItem","stringify","getReviewsForVehicle","vehicleId","filter","review","getUserReviewForVehicle","find","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useReviews","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/phata/OneDrive/Desktop/VaahanBazaar/front/src/contexts/ReviewsContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\nimport axios from 'axios';\n\nconst ReviewsContext = createContext();\n\nexport const ReviewsProvider = ({ children }) => {\n  const [reviews, setReviews] = useState([]);\n\n  // Load reviews from backend on initial load\n  useEffect(() => {\n    fetchAllReviews();\n  }, []);\n\n  const fetchAllReviews = async () => {\n    try {\n      // In a real app, you would fetch reviews from the backend\n      // For now, we'll keep the localStorage approach for simplicity\n      const savedReviews = localStorage.getItem('reviews');\n      if (savedReviews) {\n        setReviews(JSON.parse(savedReviews));\n      }\n    } catch (err) {\n      console.error('Error fetching reviews:', err);\n    }\n  };\n\n  const addReview = async (reviewData, userId) => {\n    try {\n      // In a real app, you would send this to the backend\n      const newReview = {\n        id: Date.now(),\n        ...reviewData,\n        date: new Date().toISOString().split('T')[0]\n      };\n      \n      // For now, we'll keep the localStorage approach for simplicity\n      setReviews([...reviews, newReview]);\n      localStorage.setItem('reviews', JSON.stringify([...reviews, newReview]));\n      \n      return newReview;\n    } catch (err) {\n      console.error('Error adding review:', err);\n      throw err;\n    }\n  };\n\n  const getReviewsForVehicle = (vehicleId) => {\n    return reviews.filter(review => review.vehicleId === vehicleId);\n  };\n\n  const getUserReviewForVehicle = (userId, vehicleId) => {\n    return reviews.find(review => review.userId === userId && review.vehicleId === vehicleId);\n  };\n\n  return (\n    <ReviewsContext.Provider value={{\n      reviews,\n      addReview,\n      getReviewsForVehicle,\n      getUserReviewForVehicle\n    }}>\n      {children}\n    </ReviewsContext.Provider>\n  );\n};\n\nexport const useReviews = () => {\n  const context = useContext(ReviewsContext);\n  if (!context) {\n    throw new Error('useReviews must be used within a ReviewsProvider');\n  }\n  return context;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}