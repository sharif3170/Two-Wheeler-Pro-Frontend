{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\phata\\\\OneDrive\\\\Desktop\\\\TwoWheelerPro\\\\front\\\\src\\\\contexts\\\\FavoritesContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FavoritesContext = /*#__PURE__*/createContext();\nexport const useFavorites = () => {\n  _s();\n  const context = useContext(FavoritesContext);\n  if (!context) {\n    throw new Error('useFavorites must be used within a FavoritesProvider');\n  }\n  return context;\n};\n_s(useFavorites, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const FavoritesProvider = ({\n  children\n}) => {\n  _s2();\n  const [favorites, setFavorites] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  // Fetch favorites from backend on initial render\n  useEffect(() => {\n    fetchFavorites();\n  }, []);\n  const fetchFavorites = async () => {\n    try {\n      const userId = localStorage.getItem('userId');\n      if (!userId) {\n        setLoading(false);\n        return;\n      }\n      const response = await axios.get(`${process.env.REACT_APP_API_URL}/favorites/user`, {\n        headers: {\n          'user-id': userId\n        }\n      });\n      setFavorites(response.data.favorites);\n    } catch (error) {\n      console.error('Error fetching favorites:', error);\n      setFavorites([]);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const addToFavorites = async vehicle => {\n    try {\n      const userId = localStorage.getItem('userId');\n      if (!userId) {\n        // If not logged in, still update local state for UI consistency\n        setFavorites(prevFavorites => {\n          const isAlreadyFavorite = prevFavorites.some(fav => fav.vehicleId === vehicle.id);\n          if (!isAlreadyFavorite) {\n            return [...prevFavorites, {\n              vehicleId: vehicle.id,\n              vehicleName: vehicle.name,\n              vehicleBrand: vehicle.brand,\n              vehiclePrice: vehicle.price,\n              vehicleImage: vehicle.image\n            }];\n          }\n          return prevFavorites;\n        });\n        return;\n      }\n      const response = await axios.post(`${process.env.REACT_APP_API_URL}/favorites/add`, {\n        vehicleId: vehicle.id,\n        vehicleName: vehicle.name,\n        vehicleBrand: vehicle.brand,\n        vehiclePrice: vehicle.price,\n        vehicleImage: vehicle.image\n      }, {\n        headers: {\n          'user-id': userId,\n          'Content-Type': 'application/json'\n        }\n      });\n      if (response.data.success) {\n        setFavorites(prevFavorites => {\n          const isAlreadyFavorite = prevFavorites.some(fav => fav.vehicleId === vehicle.id);\n          if (!isAlreadyFavorite) {\n            return [...prevFavorites, response.data.favorite];\n          }\n          return prevFavorites;\n        });\n      }\n    } catch (error) {\n      console.error('Error adding to favorites:', error);\n      // Still update local state for UI consistency\n      setFavorites(prevFavorites => {\n        const isAlreadyFavorite = prevFavorites.some(fav => fav.vehicleId === vehicle.id);\n        if (!isAlreadyFavorite) {\n          return [...prevFavorites, {\n            vehicleId: vehicle.id,\n            vehicleName: vehicle.name,\n            vehicleBrand: vehicle.brand,\n            vehiclePrice: vehicle.price,\n            vehicleImage: vehicle.image\n          }];\n        }\n        return prevFavorites;\n      });\n    }\n  };\n  const removeFromFavorites = async vehicleId => {\n    try {\n      const userId = localStorage.getItem('userId');\n      if (!userId) {\n        // If not logged in, still update local state for UI consistency\n        setFavorites(prevFavorites => prevFavorites.filter(vehicle => vehicle.vehicleId !== vehicleId));\n        return;\n      }\n      const response = await axios.delete(`${process.env.REACT_APP_API_URL}/favorites/remove/${vehicleId}`, {\n        headers: {\n          'user-id': userId\n        }\n      });\n      if (response.data.success) {\n        setFavorites(prevFavorites => prevFavorites.filter(vehicle => vehicle.vehicleId !== vehicleId));\n      }\n    } catch (error) {\n      console.error('Error removing from favorites:', error);\n      // Still update local state for UI consistency\n      setFavorites(prevFavorites => prevFavorites.filter(vehicle => vehicle.vehicleId !== vehicleId));\n    }\n  };\n  const toggleFavorite = async vehicle => {\n    try {\n      const userId = localStorage.getItem('userId');\n      if (!userId) {\n        // If not logged in, still update local state for UI consistency\n        setFavorites(prevFavorites => {\n          const isAlreadyFavorite = prevFavorites.some(fav => fav.vehicleId === vehicle.id);\n          if (isAlreadyFavorite) {\n            return prevFavorites.filter(fav => fav.vehicleId !== vehicle.id);\n          } else {\n            return [...prevFavorites, {\n              vehicleId: vehicle.id,\n              vehicleName: vehicle.name,\n              vehicleBrand: vehicle.brand,\n              vehiclePrice: vehicle.price,\n              vehicleImage: vehicle.image\n            }];\n          }\n        });\n        return;\n      }\n      const response = await axios.post(`${process.env.REACT_APP_API_URL}/favorites/toggle`, {\n        vehicleId: vehicle.id,\n        vehicleName: vehicle.name,\n        vehicleBrand: vehicle.brand,\n        vehiclePrice: vehicle.price,\n        vehicleImage: vehicle.image\n      }, {\n        headers: {\n          'user-id': userId,\n          'Content-Type': 'application/json'\n        }\n      });\n      if (response.data.success) {\n        if (response.data.isFavorited) {\n          setFavorites(prevFavorites => {\n            const isAlreadyFavorite = prevFavorites.some(fav => fav.vehicleId === vehicle.id);\n            if (!isAlreadyFavorite) {\n              return [...prevFavorites, response.data.favorite];\n            }\n            return prevFavorites;\n          });\n        } else {\n          setFavorites(prevFavorites => prevFavorites.filter(fav => fav.vehicleId !== vehicle.id));\n        }\n      }\n      // Refresh favorites to ensure consistency\n      await fetchFavorites();\n    } catch (error) {\n      console.error('Error toggling favorite:', error);\n      // Still update local state for UI consistency\n      setFavorites(prevFavorites => {\n        const isAlreadyFavorite = prevFavorites.some(fav => fav.vehicleId === vehicle.id);\n        if (isAlreadyFavorite) {\n          return prevFavorites.filter(fav => fav.vehicleId !== vehicle.id);\n        } else {\n          return [...prevFavorites, {\n            vehicleId: vehicle.id,\n            vehicleName: vehicle.name,\n            vehicleBrand: vehicle.brand,\n            vehiclePrice: vehicle.price,\n            vehicleImage: vehicle.image\n          }];\n        }\n      });\n    }\n  };\n  const isFavorite = vehicleId => {\n    return favorites.some(vehicle => vehicle.vehicleId === vehicleId);\n  };\n  const value = {\n    favorites,\n    loading,\n    addToFavorites,\n    removeFromFavorites,\n    toggleFavorite,\n    isFavorite,\n    fetchFavorites\n  };\n  return /*#__PURE__*/_jsxDEV(FavoritesContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 232,\n    columnNumber: 5\n  }, this);\n};\n_s2(FavoritesProvider, \"Ztw52dfcURF+F8wmgomQkZAXDDo=\");\n_c = FavoritesProvider;\nvar _c;\n$RefreshReg$(_c, \"FavoritesProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","axios","jsxDEV","_jsxDEV","FavoritesContext","useFavorites","_s","context","Error","FavoritesProvider","children","_s2","favorites","setFavorites","loading","setLoading","fetchFavorites","userId","localStorage","getItem","response","get","process","env","REACT_APP_API_URL","headers","data","error","console","addToFavorites","vehicle","prevFavorites","isAlreadyFavorite","some","fav","vehicleId","id","vehicleName","name","vehicleBrand","brand","vehiclePrice","price","vehicleImage","image","post","success","favorite","removeFromFavorites","filter","delete","toggleFavorite","isFavorited","isFavorite","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/phata/OneDrive/Desktop/TwoWheelerPro/front/src/contexts/FavoritesContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst FavoritesContext = createContext();\n\nexport const useFavorites = () => {\n  const context = useContext(FavoritesContext);\n  if (!context) {\n    throw new Error('useFavorites must be used within a FavoritesProvider');\n  }\n  return context;\n};\n\nexport const FavoritesProvider = ({ children }) => {\n  const [favorites, setFavorites] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  // Fetch favorites from backend on initial render\n  useEffect(() => {\n    fetchFavorites();\n  }, []);\n\n  const fetchFavorites = async () => {\n    try {\n      const userId = localStorage.getItem('userId');\n      if (!userId) {\n        setLoading(false);\n        return;\n      }\n\n      const response = await axios.get(\n        `${process.env.REACT_APP_API_URL}/favorites/user`,\n        {\n          headers: {\n            'user-id': userId\n          }\n        }\n      );\n      \n      setFavorites(response.data.favorites);\n    } catch (error) {\n      console.error('Error fetching favorites:', error);\n      setFavorites([]);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const addToFavorites = async (vehicle) => {\n    try {\n      const userId = localStorage.getItem('userId');\n      if (!userId) {\n        // If not logged in, still update local state for UI consistency\n        setFavorites(prevFavorites => {\n          const isAlreadyFavorite = prevFavorites.some(fav => fav.vehicleId === vehicle.id);\n          if (!isAlreadyFavorite) {\n            return [...prevFavorites, {\n              vehicleId: vehicle.id,\n              vehicleName: vehicle.name,\n              vehicleBrand: vehicle.brand,\n              vehiclePrice: vehicle.price,\n              vehicleImage: vehicle.image\n            }];\n          }\n          return prevFavorites;\n        });\n        return;\n      }\n\n      const response = await axios.post(\n        `${process.env.REACT_APP_API_URL}/favorites/add`,\n        {\n          vehicleId: vehicle.id,\n          vehicleName: vehicle.name,\n          vehicleBrand: vehicle.brand,\n          vehiclePrice: vehicle.price,\n          vehicleImage: vehicle.image\n        },\n        {\n          headers: {\n            'user-id': userId,\n            'Content-Type': 'application/json'\n          }\n        }\n      );\n      \n      if (response.data.success) {\n        setFavorites(prevFavorites => {\n          const isAlreadyFavorite = prevFavorites.some(fav => fav.vehicleId === vehicle.id);\n          if (!isAlreadyFavorite) {\n            return [...prevFavorites, response.data.favorite];\n          }\n          return prevFavorites;\n        });\n      }\n    } catch (error) {\n      console.error('Error adding to favorites:', error);\n      // Still update local state for UI consistency\n      setFavorites(prevFavorites => {\n        const isAlreadyFavorite = prevFavorites.some(fav => fav.vehicleId === vehicle.id);\n        if (!isAlreadyFavorite) {\n          return [...prevFavorites, {\n            vehicleId: vehicle.id,\n            vehicleName: vehicle.name,\n            vehicleBrand: vehicle.brand,\n            vehiclePrice: vehicle.price,\n            vehicleImage: vehicle.image\n          }];\n        }\n        return prevFavorites;\n      });\n    }\n  };\n\n  const removeFromFavorites = async (vehicleId) => {\n    try {\n      const userId = localStorage.getItem('userId');\n      if (!userId) {\n        // If not logged in, still update local state for UI consistency\n        setFavorites(prevFavorites => prevFavorites.filter(vehicle => vehicle.vehicleId !== vehicleId));\n        return;\n      }\n\n      const response = await axios.delete(\n        `${process.env.REACT_APP_API_URL}/favorites/remove/${vehicleId}`,\n        {\n          headers: {\n            'user-id': userId\n          }\n        }\n      );\n      \n      if (response.data.success) {\n        setFavorites(prevFavorites => prevFavorites.filter(vehicle => vehicle.vehicleId !== vehicleId));\n      }\n    } catch (error) {\n      console.error('Error removing from favorites:', error);\n      // Still update local state for UI consistency\n      setFavorites(prevFavorites => prevFavorites.filter(vehicle => vehicle.vehicleId !== vehicleId));\n    }\n  };\n\n  const toggleFavorite = async (vehicle) => {\n    try {\n      const userId = localStorage.getItem('userId');\n      if (!userId) {\n        // If not logged in, still update local state for UI consistency\n        setFavorites(prevFavorites => {\n          const isAlreadyFavorite = prevFavorites.some(fav => fav.vehicleId === vehicle.id);\n          if (isAlreadyFavorite) {\n            return prevFavorites.filter(fav => fav.vehicleId !== vehicle.id);\n          } else {\n            return [...prevFavorites, {\n              vehicleId: vehicle.id,\n              vehicleName: vehicle.name,\n              vehicleBrand: vehicle.brand,\n              vehiclePrice: vehicle.price,\n              vehicleImage: vehicle.image\n            }];\n          }\n        });\n        return;\n      }\n\n      const response = await axios.post(\n        `${process.env.REACT_APP_API_URL}/favorites/toggle`,\n        {\n          vehicleId: vehicle.id,\n          vehicleName: vehicle.name,\n          vehicleBrand: vehicle.brand,\n          vehiclePrice: vehicle.price,\n          vehicleImage: vehicle.image\n        },\n        {\n          headers: {\n            'user-id': userId,\n            'Content-Type': 'application/json'\n          }\n        }\n      );\n      \n      if (response.data.success) {\n        if (response.data.isFavorited) {\n          setFavorites(prevFavorites => {\n            const isAlreadyFavorite = prevFavorites.some(fav => fav.vehicleId === vehicle.id);\n            if (!isAlreadyFavorite) {\n              return [...prevFavorites, response.data.favorite];\n            }\n            return prevFavorites;\n          });\n        } else {\n          setFavorites(prevFavorites => prevFavorites.filter(fav => fav.vehicleId !== vehicle.id));\n        }\n      }\n      // Refresh favorites to ensure consistency\n      await fetchFavorites();\n    } catch (error) {\n      console.error('Error toggling favorite:', error);\n      // Still update local state for UI consistency\n      setFavorites(prevFavorites => {\n        const isAlreadyFavorite = prevFavorites.some(fav => fav.vehicleId === vehicle.id);\n        if (isAlreadyFavorite) {\n          return prevFavorites.filter(fav => fav.vehicleId !== vehicle.id);\n        } else {\n          return [...prevFavorites, {\n            vehicleId: vehicle.id,\n            vehicleName: vehicle.name,\n            vehicleBrand: vehicle.brand,\n            vehiclePrice: vehicle.price,\n            vehicleImage: vehicle.image\n          }];\n        }\n      });\n    }\n  };\n\n  const isFavorite = (vehicleId) => {\n    return favorites.some(vehicle => vehicle.vehicleId === vehicleId);\n  };\n\n  const value = {\n    favorites,\n    loading,\n    addToFavorites,\n    removeFromFavorites,\n    toggleFavorite,\n    isFavorite,\n    fetchFavorites\n  };\n\n  return (\n    <FavoritesContext.Provider value={value}>\n      {children}\n    </FavoritesContext.Provider>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}